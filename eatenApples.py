import heapq
class Solution(object):
    # wrong answer
    def eatenApples(self, apples, days):
        res = 0
        heap = []
        heapq.heapify(heap)
        day = 0
        for i in range(len(apples)):
            cnt = apples[i]
            if cnt != 0:
                heapq.heappush(heap, [i, i + days[i], cnt])
        for i in range(len(apples)):
            if apples[i] != 0:
                break
            day += 1
        while heap:
            curr = heapq.heappop(heap)
            if day >= curr[1]:
                continue
            else:
                res += min(curr[2], curr[1] - day)
                day += min(curr[2], curr[1] - day)
        return res

test = Solution()
print test.eatenApples([1,2,3,5,2], [3,2,1,4,2])
print test.eatenApples([3,0,0,0,0,2], [3,0,0,0,0,2])
# 102
print test.eatenApples([0,19,19,19,11,14,33,0,28,7,0,28,7,0,21,16,0,22,0,13,8,0,19,0,0,2,26,2,22,0,8,0,0,27,19,16,24,0,20,26,20,7,0,0,29,0,0,16,19,0,0,0,29,30,17,0,23,0,0,26,24,13,3,0,21,0,18,0],
                       [0,5,1,16,7,10,54,0,40,2,0,23,4,0,20,18,0,40,0,22,8,0,35,0,0,3,24,1,8,0,10,0,0,2,38,8,4,0,36,33,14,9,0,0,56,0,0,21,27,0,0,0,14,20,18,0,42,0,0,44,3,8,3,0,10,0,27,0])
# 165
print test.eatenApples([0,47,47,0,27,11,24,2,0,0,32,12,34,24,40,28,35,16,0,38,0,0,30,17,11,0,0,47,0,33,27,7,43,0,0,43,41,10,35,27,43,8,0,0,10,5,3,0,1,24,17,0,17,0,0,22,41,35,0,10,16,8,10,17,0,38,35,18,6,29,9,0,14,11,0,0,43,14,17,3,6,4,2,44,6,18,26,0,23,11,37,37,1,47],
                       [0,19,68,0,37,17,35,3,0,0,17,23,2,23,25,24,51,27,0,41,0,0,51,29,21,0,0,60,0,33,50,4,7,0,0,16,77,4,44,17,65,7,0,0,3,4,3,0,1,24,1,0,22,0,0,41,62,39,0,20,3,3,10,16,0,71,53,32,8,31,14,0,15,5,0,0,15,9,7,4,3,5,3,82,5,16,25,0,3,5,57,34,2,73])